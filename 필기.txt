- 객체
  키(key)와 값(value)로 이루어진 property(속성)들의 모음이다.

- 객체지향 (Object Oriented Programming : OOP)
  · 추상화 (Abstraction)

  · 캡슐화 (Encapsulation)
    - private 처리
    - 내 필드(field)를 수정하려면? -> getter, setter 를 써야 함.
    - 직접 수정X !

  · 상속 (Inheritance)
    - Class를 선언할때 extends "부모클래스명" 하면 상속이 됨.
    - 개별 상속받기 위해선 super.~ 사용

  · 다형성 (Polymorphism)
    - 이름이 같지만 다르게 쓴다!
    - 함수의 이름이 같지만, 기능은 다르게 쓴다 (오버라이딩)
    - 함수의 이름이 같지만, 파라미터 개수를 다르게 쓴다 (오버로딩)

- Arrow Function
  · 일반 함수 : function () {}
  · 화살표 함수 : () => {}  (화살표 함수는 항상 무명메서드 이다)
  ex) 
    fucntion addNum(n, m){
      return n + m;
    }

    < 두 함수는 기능이 같다 >
    
    const addNum = (n,m) => n + m;

- 콜백 함수
  · 이벤트 발생시 호출되는 예약 함수
  · 함수의 Parameter로 들어가는 함수

- [].forEach
  · 단순히 순회를 하기위해 존재
  · Array의 원소 개수만큼 Callback 함수가 호출됨
  · 따로 조건을 걸 수 없음 (처음부터 끝까지 자동 탐색)
  · return 값이 없음

- [].some
  · Array의 원소 개수만큼 Callback 함수가 호출됨
  · 하나의 조건만 충족해도 true를 반환, 아니면 false

- [].every
  · Array의 원소 개수만큼 Callback 함수가 호출됨
  · 모든 원소가 조건을 충족해야 true를 반환, 아니면 false

- [].find
  · Array의 원소 개수만큼 Callback 함수가 호출됨
  · 해당 조건을 만족하는 첫번째 요소의 '값'을 반환, 없을 경우 undefined

- [].findIndex
  · Array의 원소 개수만큼 Callback 함수가 호출됨
  · 해당 조건을 만족하는 첫번째 요소의 '인덱스'를 반환, 없을 경우 -1

    <undefined, -1은 둘 다 조건문에서 false로 작동함>

- [].filter ((요소, index))
  · Array의 원소 개수만큼 Callback 함수가 호출됨
  · 해당 조건에 만족하는 return 값을 모아 새로운 배열로 만듦
  · 요소뿐만 아니라 index로도 탐색가능

- [].map ((요소, index))
  · Array의 원소 개수만큼 Callback 함수가 호출됨
  · Array의 요소를 하나씩 탐색하며, Callback 함수의 return 값을 모아둠
  · return 값을 통해 새로운 Array을 만듦
  · 요소뿐만 아니라 index로도 탐색가능

- [].reduce((acc, cur) => {}, 초기값)
  · 초기값은 생략 가능
  · 초기값에 숫자뿐만 아니라, 문자, 배열, 빈 객체도 넣을 수 있음
  · 첫 번째 인자(acc) 는 accumulator(누산기)를 의미
    · 결과 값을 해당 acc에 담아서 return
  · 두 번째 인자(cur) 는 현재 값을 의미
  ex)
    const nums = [1,2,3,4,5,6];

    const newNums = nums.reduce((acc, cur) => {
      if(cur > 3) acc.push(cur);
      return acc; ☆ 꼭 return 해줘야함 ☆
    }, []);

    console.log(newNums); -> 결과 [4, 5, 6]

- 긍정 / 부정의 의미
  · 부정의 의미
    · undefined
    · null
    · 0
    · ''(빈 문자열)
    · false
  · 긍정의 의미
    · 부정의 의미를 제외한 모든것
    ※ 빈 배열과 빈 객체는 긍정의 의미를 가지고 있다 ※

- JS에서 Array(배열), Object(객체)는 비교 불가
  ex) const a = [1,2,3];
      const b = [1,2,3];
      if (a === b) console.log("같다");
      else console.log("다르다");
      --> 결과는 "다르다" 출력, 객체도 마찬가지 비교 불가

      const a = [];
      if (a == []) console.log("같다");
      else console.log("다르다");
      --> 결과는 마찬가지 "다르다" 출력
  
  · 배열이나 객체가 비어있는지 알고 싶으면 if([].length)로 접근해야함

- 백틱 (``)
  · 키보드 왼쪽 Tab 버튼 위에 위치
  · ""와 다르게 Enter를 인식
  · 문자열과 변수를 같이 사용 가능
    · 변수를 사용하는 경우 ${변수} 형태로 사용한다.
  ex) const name = "우영우";
      const introduce = `제 이름은 ${name} 입니다`;
      introduce --> '제 이름은 우영우 입니다.'

- destructing (객체)
  · 객체 안에 있는 값을 추출해서 변수/상수로 선언하는 방식
  ex)
  const abc = {
    name: "치킨",
    type: "후라이드"
  }

  1.
  const {name, type} = abc;
  
  2.
  const {
    name: name,
    type: type
  } = abc;
  // 두 개 다 같은 결과
  console.log(name); --> 치킨
  console.log(type); --> 후라이드

- destructing (배열)
  · 배열은 순서가 보장되어 있기 때문에 임의의 변수를 등록해도 가능하다.
  ex) const array = [1,2];
  const [one, two] = array;
  console.log(one); --> 1
  console.log(two); --> 2

- Spread
  · 객체/배열을 통째로 끌고와서 펼치는 형태
  ex) 객체버전
  const square = {
    width: 200,
    height : 200,
  }

  const colorSquare = {
    ...sqaure, // ... 찍는 것이 spread 사용법
    color: 'red
  }

  console.log(colorSquare) --> {width:200, height:200, color:'red'}

  배열버전
  const catTypeAnimals = ['고양이', '호랑이'];
  const dogTypeAnimals = ['개', '늑대];

  const allTypeAnimals = [...catTypeAnimals, ...dogTypeAnimals, '비버',];

  console.log(allTypeAnimals) --> ['고양이', '호랑이', '개', '늑대', '비버']